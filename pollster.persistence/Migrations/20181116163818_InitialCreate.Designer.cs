// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pollster.persistence;

namespace pollster.persistence.Migrations
{
    [DbContext(typeof(PoolsterDbContext))]
    [Migration("20181116163818_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pollster.domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerSetId");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 562, DateTimeKind.Utc).AddTicks(4062));

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("PossibleAnswerId");

                    b.HasKey("AnswerId");

                    b.HasIndex("AnswerSetId");

                    b.HasIndex("PossibleAnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("pollster.domain.Entities.AnswerSet", b =>
                {
                    b.Property<int>("AnswerSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerSetId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 567, DateTimeKind.Utc).AddTicks(4064));

                    b.Property<DateTime>("FinishedAt");

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartedAt");

                    b.Property<int>("SurveyId");

                    b.Property<int>("UserId");

                    b.HasKey("AnswerSetId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerSets");
                });

            modelBuilder.Entity("pollster.domain.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientId")
                        .HasMaxLength(6)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 569, DateTimeKind.Utc).AddTicks(4066));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("pollster.domain.Entities.PossibleAnswer", b =>
                {
                    b.Property<int>("PossibleAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PossibleAnswerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 572, DateTimeKind.Utc).AddTicks(4067));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("PossibleAnswerText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("QuestionId");

                    b.Property<int>("SortOrder");

                    b.HasKey("PossibleAnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PossibleAnswers");
                });

            modelBuilder.Entity("pollster.domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuestionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 576, DateTimeKind.Utc).AddTicks(4070));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired");

                    b.Property<int>("QuestionResponseType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("SortOrder");

                    b.Property<int>("SurveyId");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("pollster.domain.Entities.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SurveyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 580, DateTimeKind.Utc).AddTicks(4072));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("pollster.domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasMaxLength(6)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 16, 38, 17, 596, DateTimeKind.Utc).AddTicks(4081));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserType");

                    b.HasKey("UserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pollster.domain.Entities.Answer", b =>
                {
                    b.HasOne("pollster.domain.Entities.AnswerSet", "AnswerSet")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerSetId")
                        .HasConstraintName("FK_Answers_Answer_Sets");

                    b.HasOne("pollster.domain.Entities.PossibleAnswer", "PossibleAnswer")
                        .WithMany("Answers")
                        .HasForeignKey("PossibleAnswerId")
                        .HasConstraintName("FK_Answers_Possible_Answers");
                });

            modelBuilder.Entity("pollster.domain.Entities.AnswerSet", b =>
                {
                    b.HasOne("pollster.domain.Entities.Survey", "Survey")
                        .WithMany("AnswerSets")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_Answer_Sets_Surveys");

                    b.HasOne("pollster.domain.Entities.User", "User")
                        .WithMany("AnswerSets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Answer_Sets_Users")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("pollster.domain.Entities.PossibleAnswer", b =>
                {
                    b.HasOne("pollster.domain.Entities.Question", "Question")
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Possible_Answers_Questions");
                });

            modelBuilder.Entity("pollster.domain.Entities.Question", b =>
                {
                    b.HasOne("pollster.domain.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_Questions_Surveys");
                });

            modelBuilder.Entity("pollster.domain.Entities.Survey", b =>
                {
                    b.HasOne("pollster.domain.Entities.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Surveys_Users");
                });

            modelBuilder.Entity("pollster.domain.Entities.User", b =>
                {
                    b.HasOne("pollster.domain.Entities.Client", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Users_Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
