// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pollster.persistence;

namespace pollster.persistence.Migrations
{
    [DbContext(typeof(PoolsterDbContext))]
    partial class PoolsterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pollster.domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerSetId");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 230, DateTimeKind.Utc).AddTicks(9447));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("PossibleAnswerId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AnswerId");

                    b.HasIndex("AnswerSetId");

                    b.HasIndex("PossibleAnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("pollster.domain.Entities.AnswerSet", b =>
                {
                    b.Property<int>("AnswerSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerSetId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 234, DateTimeKind.Utc).AddTicks(9450));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<DateTime>("FinishedAt");

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartedAt");

                    b.Property<int>("SurveyId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AnswerSetId");

                    b.HasIndex("SurveyId");

                    b.ToTable("AnswerSets");
                });

            modelBuilder.Entity("pollster.domain.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientId")
                        .HasMaxLength(6)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 236, DateTimeKind.Utc).AddTicks(9451));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("pollster.domain.Entities.PossibleAnswer", b =>
                {
                    b.Property<int>("PossibleAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PossibleAnswerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 239, DateTimeKind.Utc).AddTicks(9452));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("PossibleAnswerText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("QuestionId");

                    b.Property<int>("SortOrder");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PossibleAnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PossibleAnswers");
                });

            modelBuilder.Entity("pollster.domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuestionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 244, DateTimeKind.Utc).AddTicks(9455));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired");

                    b.Property<int>("QuestionResponseType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("SortOrder");

                    b.Property<int>("SurveyId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("pollster.domain.Entities.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SurveyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 247, DateTimeKind.Utc).AddTicks(9457));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("SurveyId");

                    b.HasIndex("ClientId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("pollster.domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasMaxLength(6)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 11, 16, 15, 23, 16, 263, DateTimeKind.Utc).AddTicks(9466));

                    b.Property<DateTime>("DeletedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExisting")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserType");

                    b.HasKey("UserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pollster.domain.Entities.Answer", b =>
                {
                    b.HasOne("pollster.domain.Entities.AnswerSet", "AnswerSet")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerSetId")
                        .HasConstraintName("FK_Answers_Answer_Sets");

                    b.HasOne("pollster.domain.Entities.PossibleAnswer", "PossibleAnswer")
                        .WithMany("Answers")
                        .HasForeignKey("PossibleAnswerId")
                        .HasConstraintName("FK_Answers_Possible_Answers");
                });

            modelBuilder.Entity("pollster.domain.Entities.AnswerSet", b =>
                {
                    b.HasOne("pollster.domain.Entities.Survey", "Survey")
                        .WithMany("AnswerSets")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_Answer_Sets_Surveys");
                });

            modelBuilder.Entity("pollster.domain.Entities.PossibleAnswer", b =>
                {
                    b.HasOne("pollster.domain.Entities.Question", "Question")
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Possible_Answers_Questions");
                });

            modelBuilder.Entity("pollster.domain.Entities.Question", b =>
                {
                    b.HasOne("pollster.domain.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_Questions_Surveys");
                });

            modelBuilder.Entity("pollster.domain.Entities.Survey", b =>
                {
                    b.HasOne("pollster.domain.Entities.Client", "Client")
                        .WithMany("Surveys")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Surveys_Clients");
                });

            modelBuilder.Entity("pollster.domain.Entities.User", b =>
                {
                    b.HasOne("pollster.domain.Entities.Client", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Users_Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
